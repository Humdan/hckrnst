---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'IAM resources'

Resources:
  ElasticBeanstalkEC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: 'ConatinerPolicy'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ssm:UpdateInstanceInformation'
            - 'ssmmessages:CreateControlChannel'
            - 'ssmmessages:CreateDataChannel'
            - 'ssmmessages:OpenControlChannel'
            - 'ssmmessages:OpenDataChannel'
            Resource: '*'
          - Effect: Allow
            Action:
            - 'ec2:Describe*'
            - 'cloudformation:Describe*'
            - 'cloudformation:Get*'
            - 'cloudformation:List*'
            Resource: '*'
          - Effect: Allow
            Action:
            - 'ssm:DescribeParameters'
            Resource: '*'
          - Effect: Allow
            Action:
            - 'ssm:GetParameter*'
            Resource:
            - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/hckrnst/*'
            - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/__vault__/*/hckrnst/*'
      ManagedPolicyArns:
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AWSElasticBeanstalkWebTier'
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AWSElasticBeanstalkWorkerTier'
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker'
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly'
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchLogsFullAccess'
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonS3ReadOnlyAccess'
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy'

  EBSInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles:
        - !Ref 'ElasticBeanstalkEC2Role'

  ElasticBeanstalkServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'elasticbeanstalk.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
          Condition:
            StringEquals:
              sts:ExternalId: elasticbeanstalk
      Path: '/'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkEnhancedHealth'
      - 'arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkService'

Outputs:
  IAMStackName:
    Value: !Ref 'AWS::StackName'
    Export:
      Name: !Sub 'IAMStackName-${AWS::StackName}'
  EBSServiceRole:
    Value: !Ref 'ElasticBeanstalkServiceRole'
    Export:
      Name: !Sub 'EBSServiceRole-${AWS::StackName}'
  EBSServiceRoleArn:
    Value: !GetAtt ElasticBeanstalkServiceRole.Arn
    Export:
      Name: !Sub 'EBSServiceRoleArn-${AWS::StackName}'
  EBSServiceRoleId:
    Value: !GetAtt ElasticBeanstalkServiceRole.RoleId
    Export:
      Name: !Sub 'EBSServiceRoleId-${AWS::StackName}'
  EBSEC2ServiceRole:
    Value: !Ref 'ElasticBeanstalkEC2Role'
    Export:
      Name: !Sub 'EBSEC2ServiceRole-${AWS::StackName}'
  EBSEC2ServiceRoleArn:
    Value: !GetAtt ElasticBeanstalkEC2Role.Arn
    Export:
      Name: !Sub 'EBSEC2ServiceRoleArn-${AWS::StackName}'
  EBSEC2ServiceRoleId:
    Value: !GetAtt ElasticBeanstalkEC2Role.RoleId
    Export:
      Name: !Sub 'EBSEC2ServiceRoleId-${AWS::StackName}'
  EBSInstanceProfile:
    Value: !Ref 'EBSInstanceProfile'
    Export:
      Name: !Sub 'EBSInstanceProfile-${AWS::StackName}'
  EBSInstanceProfileArn:
    Value: !GetAtt EBSInstanceProfile.Arn
    Export:
      Name: !Sub 'EBSInstanceProfileArn-${AWS::StackName}'